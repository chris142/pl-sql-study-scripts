--set serveroutput on;
CREATE TABLE error_log_table
(
  err_tmstp TIMESTAMP NOT NULL,
  err_type  VARCHAR2(10),
  err_code  INTEGER,
  err_msg   VARCHAR2(512),
  err_place VARCHAR2(200),
  err_trace VARCHAR2(300),
  CONSTRAINT ck_err_type CHECK (err_type IN ('DEBUG','INFO','WARNING', 'ERROR', 'FATAL'))
);

--drop table error_log_table;

CREATE OR REPLACE PACKAGE err_pkg
IS
  c_debug CONSTANT VARCHAR2(10) := 'DEBUG';
  c_info  CONSTANT VARCHAR2(10) := 'INFO';
  c_warning CONSTANT VARCHAR2(10) := 'WARNING';
  c_error CONSTANT VARCHAR2(10) := 'ERROR';
  c_fatal CONSTANT VARCHAR2(10) := 'FATAL';

  PROCEDURE write_log
    (
      err_type  IN VARCHAR2,
      err_msg   IN VARCHAR2,
      err_place IN VARCHAR2 DEFAULT null,
      err_code  IN INTEGER DEFAULT null,
      err_trace IN VARCHAR2 DEFAULT null
    );
END err_pkg;
/

CREATE OR REPLACE PACKAGE BODY err_pkg
IS
  PROCEDURE write_log
    (
      err_type  IN VARCHAR2,
      err_msg   IN VARCHAR2,
      err_place IN VARCHAR2 DEFAULT null,
      err_code  IN INTEGER DEFAULT null,
      err_trace IN VARCHAR2 DEFAULT null
    )
  IS
    PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
    
      INSERT INTO error_log_table
      VALUES (SYSTIMESTAMP, err_type, err_code, SUBSTR(err_msg, 1, 512), err_place, err_trace);
      COMMIT;
      EXCEPTION
      WHEN OTHERS
      THEN ROLLBACK;
    END write_log;
END err_pkg;
/
 
CREATE OR REPLACE PACKAGE emp_pkg
IS

  TYPE emp_table_type IS TABLE OF employees%ROWTYPE
  INDEX BY PLS_INTEGER;
  TYPE var_type IS VARRAY (20) OF INTEGER;

  PROCEDURE drop_table(v_tab_name IN VARCHAR2);
  PROCEDURE drop_table_xx;
  PROCEDURE create_table(v_tab_name IN VARCHAR2);
  PROCEDURE create_table_xx;
  FUNCTION get_dep_ids
    RETURN var_type;
  FUNCTION get_emp_table(dep_id IN INTEGER)
    RETURN emp_table_type;
  PROCEDURE fill_table(dep_id IN INTEGER, emp_mas_id1 IN emp_table_type, num_rows OUT INTEGER);
  PROCEDURE fill_table_xx;
END emp_pkg;
/

CREATE OR REPLACE PACKAGE BODY emp_pkg
IS

  FUNCTION get_dep_ids
    RETURN var_type
  IS
    var_dep_ids var_type := var_type();
    CURSOR cur_dep_is is
      select department_id
      from employees
      where department_id is not null
      group by department_id;
    BEGIN
      var_dep_ids.extend();
      OPEN cur_dep_is;
      FETCH cur_dep_is BULK COLLECT INTO var_dep_ids;
      CLOSE cur_dep_is;
      RETURN (var_dep_ids);
      EXCEPTION
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'FUNCTION get_dep_ids',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
      RAISE;
    END get_dep_ids;


  PROCEDURE create_table(v_tab_name IN VARCHAR2)
  IS
      table_already_exists EXCEPTION;
    PRAGMA EXCEPTION_INIT (table_already_exists, -955);
    BEGIN
      EXECUTE IMMEDIATE
      'CREATE TABLE ' || v_tab_name ||
      ' AS SELECT E.EMPLOYEE_ID xx_id, E.*
          FROM EMPLOYEES E
          WHERE 1 = 2';
      EXECUTE IMMEDIATE
        'ALTER TABLE ' || v_tab_name ||
          ' ADD CONSTRAINT ' || v_tab_name || '_constraint UNIQUE (xx_id)';

      EXCEPTION
      WHEN table_already_exists
      THEN NULL;
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'FUNCTION get_dep_ids',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
      RAISE;
    END create_table;


  PROCEDURE create_table_xx
  IS
    var_id        var_type := var_type();
    table_name_xx varchar2(30);
    BEGIN
      var_id.extend();
      var_id := get_dep_ids;
      FOR i IN var_id.FIRST .. var_id.LAST
      LOOP
        table_name_xx := 'employees_' || var_id(i);
        create_table(table_name_xx);
        err_pkg.write_log(err_pkg.c_info,'Table ' || table_name_xx || ' created.','PROCEDURE create_table_xx');
      END LOOP;
    EXCEPTION
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'PROCEDURE create_table_xx',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
      RAISE;
    END create_table_xx;


  PROCEDURE drop_table(v_tab_name IN VARCHAR2)
  IS
    BEGIN
      EXECUTE IMMEDIATE
      'DROP TABLE ' || v_tab_name;
      EXCEPTION
      WHEN OTHERS
      THEN
        -- work with many tables
        -- so silence slight error
        -- when some of them are already dropped
        IF SQLCODE = -942
        THEN
          -- warning!
          err_pkg.write_log(err_pkg.c_warning,'Table ' || v_tab_name || ' already dropped.','PROCEDURE drop_table');
          NULL;
          ELSE err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'PROCEDURE drop_table',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
        -- raise only if smth unexpected happens
        RAISE;
        END IF;
    END drop_table;

  PROCEDURE drop_table_xx
  IS
    var_id        var_type := var_type();
    table_name_xx varchar2(30);
    BEGIN
      var_id.extend();
      var_id := get_dep_ids;
      FOR i IN var_id.FIRST .. var_id.LAST
      LOOP
        table_name_xx := 'employees_' || var_id(i);
        drop_table(table_name_xx);
        err_pkg.write_log(err_pkg.c_info,'Table ' || table_name_xx || ' dropped.','PROCEDURE drop_table_xx');
      END LOOP;
       EXCEPTION
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'PROCEDURE drop_table_xx',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
      RAISE;
    END drop_table_xx;


  FUNCTION get_emp_table(dep_id IN INTEGER)
    RETURN emp_table_type
  IS
    v_i     INTEGER := 0;
    arr_emp emp_table_type;
    cursor cur_tab_id is SELECT *
                         FROM employees e
                         WHERE (e.department_id = dep_id)
                            or (e.department_id is null);
    BEGIN
      OPEN cur_tab_id;
      FETCH cur_tab_id bulk collect into arr_emp;
      CLOSE cur_tab_id;
      RETURN (arr_emp);
       EXCEPTION
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'FUNCTION get_emp_table',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
      RAISE;
    END;

  PROCEDURE fill_table(dep_id IN INTEGER, emp_mas_id1 IN emp_table_type, num_rows OUT INTEGER)
  IS
    table_name_xx VARCHAR2(30);
    v_id          INTEGER DEFAULT 1;
    BEGIN
      table_name_xx := 'employees_' || dep_id;
      FOR i IN 1 .. emp_mas_id1.COUNT
      LOOP
        IF (emp_mas_id1(i).department_id = dep_id) or (emp_mas_id1(i).department_id is null)
        THEN
          -- here was FORALL i in 1..emp_mas_id1.COUNT
          -- insert into table_name_xx VALUES emp_mas_id1(i);

          EXECUTE IMMEDIATE
          'INSERT INTO ' || table_name_xx || ' VALUES
   (:vid,
    :id , ''' || emp_mas_id1(i).first_name || '''
   , ''' || emp_mas_id1(i).last_name || '''
   , ''' || emp_mas_id1(i).email || '''
   , ''' || emp_mas_id1(i).phone_number || '''
   , TO_DATE(''' || emp_mas_id1(i).hire_date || ''', ''dd-MON-yyyy'')
   , ''' || emp_mas_id1(i).job_id || '''
   , :salary
   , case when ' || nvl(emp_mas_id1(i).commission_pct, -100) || ' = -100 then null else ' ||
          nvl(emp_mas_id1(i).commission_pct, -100) || ' end
   , case when ' || nvl(emp_mas_id1(i).manager_id, -100) || ' = -100 then null else ' ||
          nvl(emp_mas_id1(i).manager_id, -100) || ' end
   , case when ' || nvl(emp_mas_id1(i).department_id, -100) || ' = -100 then null else ' ||
          nvl(emp_mas_id1(i).department_id, -100) || ' end
   )'
          USING v_id, emp_mas_id1(i).employee_id, emp_mas_id1(i).salary;
          v_id := v_id + 1;
        END IF;
      END LOOP;
      COMMIT;

      num_rows := emp_mas_id1.COUNT;
      EXCEPTION
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'PROCEDURE fill_table',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
        ROLLBACK;
        RAISE;
    END fill_table;


  PROCEDURE fill_table_xx
  IS
    v_num         INTEGER DEFAULT 0;
    var_id        var_type := var_type();
    table_name_xx varchar2(30);
    mass          emp_table_type;
    BEGIN
      var_id.extend();
      var_id := get_dep_ids;
      FOR i IN var_id.FIRST .. var_id.LAST
      LOOP
        table_name_xx := 'employees_' || var_id(i);
        mass := get_emp_table(var_id(i));
        fill_table(var_id(i), mass, v_num);
        err_pkg.write_log(err_pkg.c_info,'Table ' || table_name_xx || ' filled. ' || v_num || ' rows added.','PROCEDURE fill_table_xx');
      END LOOP;
       EXCEPTION
      WHEN OTHERS
      THEN err_pkg.write_log
      (
          err_pkg.c_error,
          SQLERRM,
          'PROCEDURE fill_table_xx',
          SQLCODE,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
      );
        ROLLBACK;
      RAISE;
    END fill_table_xx;

end emp_pkg;
/


BEGIN
    emp_pkg.drop_table_xx;
    emp_pkg.create_table_xx;
    emp_pkg.fill_table_xx;
END;
/


--select * from error_log_table
--order by err_tmstp;
